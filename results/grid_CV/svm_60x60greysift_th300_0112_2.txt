

>>>>> [best parameter from grid searching] <<<<<
LinearSVC(C=0.2, class_weight=None, dual=True, fit_intercept=True,
     intercept_scaling=1, loss=l2, multi_class=ovr, penalty=l2,
     random_state=None, tol=0.0001, verbose=0)



0.517 (+/-0.009) for {'C': 0.01}
0.572 (+/-0.007) for {'C': 0.1}
0.576 (+/-0.006) for {'C': 0.2}
0.567 (+/-0.005) for {'C': 0.5}
0.557 (+/-0.001) for {'C': 1}
0.527 (+/-0.024) for {'C': 2}
0.496 (+/-0.012) for {'C': 5}
0.493 (+/-0.022) for {'C': 10}
0.483 (+/-0.012) for {'C': 100}
0.397 (+/-0.036) for {'C': 500}
0.417 (+/-0.033) for {'C': 1000}


>>>>> [best parameter from grid searching] <<<<<
SVC(C=1000, cache_size=2000, class_weight=None, coef0=0.0, degree=3,
  gamma=0.001, kernel=rbf, max_iter=-1, probability=False,
  random_state=None, shrinking=True, tol=0.001, verbose=False)



0.091 (+/-0.003) for {'kernel': 'rbf', 'C': 0.01, 'gamma': 0.1}
0.089 (+/-0.002) for {'kernel': 'rbf', 'C': 0.01, 'gamma': 0.05}
0.087 (+/-0.000) for {'kernel': 'rbf', 'C': 0.01, 'gamma': 0.02}
0.087 (+/-0.000) for {'kernel': 'rbf', 'C': 0.01, 'gamma': 0.01}
0.087 (+/-0.000) for {'kernel': 'rbf', 'C': 0.01, 'gamma': 0.005}
0.087 (+/-0.000) for {'kernel': 'rbf', 'C': 0.01, 'gamma': 0.002}
0.087 (+/-0.000) for {'kernel': 'rbf', 'C': 0.01, 'gamma': 0.001}
0.151 (+/-0.002) for {'kernel': 'rbf', 'C': 0.05, 'gamma': 0.1}
0.144 (+/-0.002) for {'kernel': 'rbf', 'C': 0.05, 'gamma': 0.05}
0.123 (+/-0.007) for {'kernel': 'rbf', 'C': 0.05, 'gamma': 0.02}
0.116 (+/-0.006) for {'kernel': 'rbf', 'C': 0.05, 'gamma': 0.01}
0.105 (+/-0.003) for {'kernel': 'rbf', 'C': 0.05, 'gamma': 0.005}
0.096 (+/-0.002) for {'kernel': 'rbf', 'C': 0.05, 'gamma': 0.002}
0.090 (+/-0.000) for {'kernel': 'rbf', 'C': 0.05, 'gamma': 0.001}
0.175 (+/-0.004) for {'kernel': 'rbf', 'C': 0.1, 'gamma': 0.1}
0.152 (+/-0.001) for {'kernel': 'rbf', 'C': 0.1, 'gamma': 0.05}
0.137 (+/-0.003) for {'kernel': 'rbf', 'C': 0.1, 'gamma': 0.02}
0.120 (+/-0.002) for {'kernel': 'rbf', 'C': 0.1, 'gamma': 0.01}
0.111 (+/-0.004) for {'kernel': 'rbf', 'C': 0.1, 'gamma': 0.005}
0.105 (+/-0.003) for {'kernel': 'rbf', 'C': 0.1, 'gamma': 0.002}
0.093 (+/-0.001) for {'kernel': 'rbf', 'C': 0.1, 'gamma': 0.001}
0.347 (+/-0.014) for {'kernel': 'rbf', 'C': 0.5, 'gamma': 0.1}
0.295 (+/-0.013) for {'kernel': 'rbf', 'C': 0.5, 'gamma': 0.05}
0.221 (+/-0.008) for {'kernel': 'rbf', 'C': 0.5, 'gamma': 0.02}
0.183 (+/-0.003) for {'kernel': 'rbf', 'C': 0.5, 'gamma': 0.01}
0.160 (+/-0.003) for {'kernel': 'rbf', 'C': 0.5, 'gamma': 0.005}
0.133 (+/-0.004) for {'kernel': 'rbf', 'C': 0.5, 'gamma': 0.002}
0.107 (+/-0.005) for {'kernel': 'rbf', 'C': 0.5, 'gamma': 0.001}
0.446 (+/-0.008) for {'kernel': 'rbf', 'C': 1, 'gamma': 0.1}
0.400 (+/-0.011) for {'kernel': 'rbf', 'C': 1, 'gamma': 0.05}
0.319 (+/-0.013) for {'kernel': 'rbf', 'C': 1, 'gamma': 0.02}
0.252 (+/-0.012) for {'kernel': 'rbf', 'C': 1, 'gamma': 0.01}
0.193 (+/-0.005) for {'kernel': 'rbf', 'C': 1, 'gamma': 0.005}
0.150 (+/-0.004) for {'kernel': 'rbf', 'C': 1, 'gamma': 0.002}
0.134 (+/-0.003) for {'kernel': 'rbf', 'C': 1, 'gamma': 0.001}
0.552 (+/-0.008) for {'kernel': 'rbf', 'C': 10, 'gamma': 0.1}
0.550 (+/-0.006) for {'kernel': 'rbf', 'C': 10, 'gamma': 0.05}
0.543 (+/-0.006) for {'kernel': 'rbf', 'C': 10, 'gamma': 0.02}
0.526 (+/-0.004) for {'kernel': 'rbf', 'C': 10, 'gamma': 0.01}
0.488 (+/-0.008) for {'kernel': 'rbf', 'C': 10, 'gamma': 0.005}
0.410 (+/-0.009) for {'kernel': 'rbf', 'C': 10, 'gamma': 0.002}
0.312 (+/-0.010) for {'kernel': 'rbf', 'C': 10, 'gamma': 0.001}
0.555 (+/-0.004) for {'kernel': 'rbf', 'C': 50, 'gamma': 0.1}
0.562 (+/-0.004) for {'kernel': 'rbf', 'C': 50, 'gamma': 0.05}
0.569 (+/-0.003) for {'kernel': 'rbf', 'C': 50, 'gamma': 0.02}
0.567 (+/-0.004) for {'kernel': 'rbf', 'C': 50, 'gamma': 0.01}
0.556 (+/-0.003) for {'kernel': 'rbf', 'C': 50, 'gamma': 0.005}
0.533 (+/-0.005) for {'kernel': 'rbf', 'C': 50, 'gamma': 0.002}
0.495 (+/-0.009) for {'kernel': 'rbf', 'C': 50, 'gamma': 0.001}
0.553 (+/-0.003) for {'kernel': 'rbf', 'C': 100, 'gamma': 0.1}
0.561 (+/-0.005) for {'kernel': 'rbf', 'C': 100, 'gamma': 0.05}
0.570 (+/-0.003) for {'kernel': 'rbf', 'C': 100, 'gamma': 0.02}
0.571 (+/-0.002) for {'kernel': 'rbf', 'C': 100, 'gamma': 0.01}
0.570 (+/-0.003) for {'kernel': 'rbf', 'C': 100, 'gamma': 0.005}
0.555 (+/-0.003) for {'kernel': 'rbf', 'C': 100, 'gamma': 0.002}
0.534 (+/-0.005) for {'kernel': 'rbf', 'C': 100, 'gamma': 0.001}
0.553 (+/-0.003) for {'kernel': 'rbf', 'C': 200, 'gamma': 0.1}
0.559 (+/-0.004) for {'kernel': 'rbf', 'C': 200, 'gamma': 0.05}
0.566 (+/-0.004) for {'kernel': 'rbf', 'C': 200, 'gamma': 0.02}
0.575 (+/-0.003) for {'kernel': 'rbf', 'C': 200, 'gamma': 0.01}
0.575 (+/-0.002) for {'kernel': 'rbf', 'C': 200, 'gamma': 0.005}
0.568 (+/-0.004) for {'kernel': 'rbf', 'C': 200, 'gamma': 0.002}
0.556 (+/-0.003) for {'kernel': 'rbf', 'C': 200, 'gamma': 0.001}
0.553 (+/-0.003) for {'kernel': 'rbf', 'C': 500, 'gamma': 0.1}
0.559 (+/-0.004) for {'kernel': 'rbf', 'C': 500, 'gamma': 0.05}
0.559 (+/-0.004) for {'kernel': 'rbf', 'C': 500, 'gamma': 0.02}
0.567 (+/-0.002) for {'kernel': 'rbf', 'C': 500, 'gamma': 0.01}
0.575 (+/-0.002) for {'kernel': 'rbf', 'C': 500, 'gamma': 0.005}
0.576 (+/-0.002) for {'kernel': 'rbf', 'C': 500, 'gamma': 0.002}
0.573 (+/-0.002) for {'kernel': 'rbf', 'C': 500, 'gamma': 0.001}
0.553 (+/-0.003) for {'kernel': 'rbf', 'C': 1000, 'gamma': 0.1}
0.559 (+/-0.004) for {'kernel': 'rbf', 'C': 1000, 'gamma': 0.05}
0.558 (+/-0.004) for {'kernel': 'rbf', 'C': 1000, 'gamma': 0.02}
0.563 (+/-0.002) for {'kernel': 'rbf', 'C': 1000, 'gamma': 0.01}
0.569 (+/-0.002) for {'kernel': 'rbf', 'C': 1000, 'gamma': 0.005}
0.574 (+/-0.001) for {'kernel': 'rbf', 'C': 1000, 'gamma': 0.002}
0.576 (+/-0.002) for {'kernel': 'rbf', 'C': 1000, 'gamma': 0.001}

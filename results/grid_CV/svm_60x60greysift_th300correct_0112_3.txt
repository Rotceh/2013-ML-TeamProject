

>>>>> [best parameter from grid searching] <<<<<
LinearSVC(C=0.2, class_weight=None, dual=True, fit_intercept=True,
     intercept_scaling=1, loss=l2, multi_class=ovr, penalty=l2,
     random_state=None, tol=0.0001, verbose=0)



0.517 (+/-0.009) for {'C': 0.01}
0.572 (+/-0.007) for {'C': 0.1}
0.575 (+/-0.007) for {'C': 0.2}
0.568 (+/-0.005) for {'C': 0.5}
0.559 (+/-0.003) for {'C': 1}
0.491 (+/-0.023) for {'C': 2}
0.498 (+/-0.025) for {'C': 5}
0.485 (+/-0.007) for {'C': 10}
0.496 (+/-0.003) for {'C': 100}
0.451 (+/-0.006) for {'C': 500}
0.439 (+/-0.010) for {'C': 1000}


>>>>> [best parameter from grid searching] <<<<<
LinearSVC(C=0.5, class_weight=None, dual=True, fit_intercept=True,
     intercept_scaling=1, loss=l2, multi_class=ovr, penalty=l2,
     random_state=None, tol=0.0001, verbose=0)



0.848 (+/-0.002) for {'C': 0.01}
0.895 (+/-0.004) for {'C': 0.1}
0.900 (+/-0.004) for {'C': 0.2}
0.905 (+/-0.003) for {'C': 0.5}
0.894 (+/-0.004) for {'C': 1}
0.846 (+/-0.013) for {'C': 2}
0.842 (+/-0.020) for {'C': 5}
0.803 (+/-0.029) for {'C': 10}
0.804 (+/-0.020) for {'C': 100}
0.808 (+/-0.009) for {'C': 500}
0.847 (+/-0.004) for {'C': 1000}


>>>>> [best parameter from grid searching] <<<<<
SVC(C=1000, cache_size=2000, class_weight=None, coef0=0.0, degree=3,
  gamma=0.001, kernel=rbf, max_iter=-1, probability=False,
  random_state=None, shrinking=True, tol=0.001, verbose=False)



0.118 (+/-0.003) for {'kernel': 'rbf', 'C': 0.01, 'gamma': 0.1}
0.110 (+/-0.001) for {'kernel': 'rbf', 'C': 0.01, 'gamma': 0.05}
0.104 (+/-0.003) for {'kernel': 'rbf', 'C': 0.01, 'gamma': 0.02}
0.101 (+/-0.003) for {'kernel': 'rbf', 'C': 0.01, 'gamma': 0.01}
0.086 (+/-0.001) for {'kernel': 'rbf', 'C': 0.01, 'gamma': 0.005}
0.087 (+/-0.000) for {'kernel': 'rbf', 'C': 0.01, 'gamma': 0.002}
0.087 (+/-0.000) for {'kernel': 'rbf', 'C': 0.01, 'gamma': 0.001}
0.292 (+/-0.008) for {'kernel': 'rbf', 'C': 0.05, 'gamma': 0.1}
0.251 (+/-0.006) for {'kernel': 'rbf', 'C': 0.05, 'gamma': 0.05}
0.212 (+/-0.003) for {'kernel': 'rbf', 'C': 0.05, 'gamma': 0.02}
0.174 (+/-0.009) for {'kernel': 'rbf', 'C': 0.05, 'gamma': 0.01}
0.122 (+/-0.004) for {'kernel': 'rbf', 'C': 0.05, 'gamma': 0.005}
0.104 (+/-0.002) for {'kernel': 'rbf', 'C': 0.05, 'gamma': 0.002}
0.100 (+/-0.001) for {'kernel': 'rbf', 'C': 0.05, 'gamma': 0.001}
0.419 (+/-0.007) for {'kernel': 'rbf', 'C': 0.1, 'gamma': 0.1}
0.358 (+/-0.007) for {'kernel': 'rbf', 'C': 0.1, 'gamma': 0.05}
0.274 (+/-0.006) for {'kernel': 'rbf', 'C': 0.1, 'gamma': 0.02}
0.233 (+/-0.005) for {'kernel': 'rbf', 'C': 0.1, 'gamma': 0.01}
0.182 (+/-0.003) for {'kernel': 'rbf', 'C': 0.1, 'gamma': 0.005}
0.115 (+/-0.000) for {'kernel': 'rbf', 'C': 0.1, 'gamma': 0.002}
0.103 (+/-0.001) for {'kernel': 'rbf', 'C': 0.1, 'gamma': 0.001}
0.711 (+/-0.004) for {'kernel': 'rbf', 'C': 0.5, 'gamma': 0.1}
0.669 (+/-0.006) for {'kernel': 'rbf', 'C': 0.5, 'gamma': 0.05}
0.578 (+/-0.006) for {'kernel': 'rbf', 'C': 0.5, 'gamma': 0.02}
0.494 (+/-0.006) for {'kernel': 'rbf', 'C': 0.5, 'gamma': 0.01}
0.387 (+/-0.004) for {'kernel': 'rbf', 'C': 0.5, 'gamma': 0.005}
0.256 (+/-0.006) for {'kernel': 'rbf', 'C': 0.5, 'gamma': 0.002}
0.199 (+/-0.005) for {'kernel': 'rbf', 'C': 0.5, 'gamma': 0.001}
0.783 (+/-0.001) for {'kernel': 'rbf', 'C': 1, 'gamma': 0.1}
0.759 (+/-0.003) for {'kernel': 'rbf', 'C': 1, 'gamma': 0.05}
0.696 (+/-0.005) for {'kernel': 'rbf', 'C': 1, 'gamma': 0.02}
0.626 (+/-0.006) for {'kernel': 'rbf', 'C': 1, 'gamma': 0.01}
0.532 (+/-0.007) for {'kernel': 'rbf', 'C': 1, 'gamma': 0.005}
0.376 (+/-0.002) for {'kernel': 'rbf', 'C': 1, 'gamma': 0.002}
0.259 (+/-0.006) for {'kernel': 'rbf', 'C': 1, 'gamma': 0.001}
0.876 (+/-0.001) for {'kernel': 'rbf', 'C': 10, 'gamma': 0.1}
0.881 (+/-0.001) for {'kernel': 'rbf', 'C': 10, 'gamma': 0.05}
0.873 (+/-0.000) for {'kernel': 'rbf', 'C': 10, 'gamma': 0.02}
0.856 (+/-0.002) for {'kernel': 'rbf', 'C': 10, 'gamma': 0.01}
0.828 (+/-0.003) for {'kernel': 'rbf', 'C': 10, 'gamma': 0.005}
0.762 (+/-0.004) for {'kernel': 'rbf', 'C': 10, 'gamma': 0.002}
0.685 (+/-0.006) for {'kernel': 'rbf', 'C': 10, 'gamma': 0.001}
0.878 (+/-0.002) for {'kernel': 'rbf', 'C': 50, 'gamma': 0.1}
0.890 (+/-0.001) for {'kernel': 'rbf', 'C': 50, 'gamma': 0.05}
0.898 (+/-0.001) for {'kernel': 'rbf', 'C': 50, 'gamma': 0.02}
0.896 (+/-0.003) for {'kernel': 'rbf', 'C': 50, 'gamma': 0.01}
0.888 (+/-0.002) for {'kernel': 'rbf', 'C': 50, 'gamma': 0.005}
0.865 (+/-0.003) for {'kernel': 'rbf', 'C': 50, 'gamma': 0.002}
0.834 (+/-0.005) for {'kernel': 'rbf', 'C': 50, 'gamma': 0.001}
0.876 (+/-0.002) for {'kernel': 'rbf', 'C': 100, 'gamma': 0.1}
0.888 (+/-0.001) for {'kernel': 'rbf', 'C': 100, 'gamma': 0.05}
0.898 (+/-0.001) for {'kernel': 'rbf', 'C': 100, 'gamma': 0.02}
0.902 (+/-0.003) for {'kernel': 'rbf', 'C': 100, 'gamma': 0.01}
0.899 (+/-0.003) for {'kernel': 'rbf', 'C': 100, 'gamma': 0.005}
0.886 (+/-0.002) for {'kernel': 'rbf', 'C': 100, 'gamma': 0.002}
0.866 (+/-0.003) for {'kernel': 'rbf', 'C': 100, 'gamma': 0.001}
0.876 (+/-0.002) for {'kernel': 'rbf', 'C': 200, 'gamma': 0.1}
0.886 (+/-0.001) for {'kernel': 'rbf', 'C': 200, 'gamma': 0.05}
0.896 (+/-0.000) for {'kernel': 'rbf', 'C': 200, 'gamma': 0.02}
0.902 (+/-0.002) for {'kernel': 'rbf', 'C': 200, 'gamma': 0.01}
0.903 (+/-0.003) for {'kernel': 'rbf', 'C': 200, 'gamma': 0.005}
0.897 (+/-0.003) for {'kernel': 'rbf', 'C': 200, 'gamma': 0.002}
0.887 (+/-0.003) for {'kernel': 'rbf', 'C': 200, 'gamma': 0.001}
0.876 (+/-0.002) for {'kernel': 'rbf', 'C': 500, 'gamma': 0.1}
0.885 (+/-0.001) for {'kernel': 'rbf', 'C': 500, 'gamma': 0.05}
0.893 (+/-0.001) for {'kernel': 'rbf', 'C': 500, 'gamma': 0.02}
0.895 (+/-0.002) for {'kernel': 'rbf', 'C': 500, 'gamma': 0.01}
0.900 (+/-0.002) for {'kernel': 'rbf', 'C': 500, 'gamma': 0.005}
0.902 (+/-0.003) for {'kernel': 'rbf', 'C': 500, 'gamma': 0.002}
0.900 (+/-0.003) for {'kernel': 'rbf', 'C': 500, 'gamma': 0.001}
0.876 (+/-0.002) for {'kernel': 'rbf', 'C': 1000, 'gamma': 0.1}
0.885 (+/-0.001) for {'kernel': 'rbf', 'C': 1000, 'gamma': 0.05}
0.890 (+/-0.001) for {'kernel': 'rbf', 'C': 1000, 'gamma': 0.02}
0.890 (+/-0.002) for {'kernel': 'rbf', 'C': 1000, 'gamma': 0.01}
0.894 (+/-0.001) for {'kernel': 'rbf', 'C': 1000, 'gamma': 0.005}
0.900 (+/-0.003) for {'kernel': 'rbf', 'C': 1000, 'gamma': 0.002}
0.904 (+/-0.003) for {'kernel': 'rbf', 'C': 1000, 'gamma': 0.001}
